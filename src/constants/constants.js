import { BigNumber, ethers } from 'ethers';
import { createRequire } from 'module';

export const WS_RPC_PROVIDER_PRIORITY = 2;

export const HTTP_RPC_PROVIDER_PRIORITY = 1;

export const FALLBACK_PROVIDER_QUORUM = 1;

export const RPC_PROVIDER_STALL_TIMEOUT = 60 * 1000;

export const UINT256_MAX_BN = ethers.constants.MaxUint256;

export const UINT128_MAX_BN = BigNumber.from(2).pow(128).sub(1);

export const UINT64_MAX_BN = BigNumber.from(2).pow(64).sub(1);

export const UINT40_MAX_BN = BigNumber.from(2).pow(40).sub(1);

export const UINT32_MAX_BN = BigNumber.from(2).pow(32).sub(1);

export const HASH_RING_SIZE = ethers.constants.MaxUint256;

export const STAKE_UINT256_MULTIPLIER_BN = UINT256_MAX_BN.div(500000000);

export const UINT256_UINT32_DIVISOR_BN = UINT256_MAX_BN.div(UINT32_MAX_BN);

export const ZERO_PREFIX = '0x';

export const ZERO_BYTES32 = ethers.constants.HashZero;

export const ZERO_ADDRESS = ethers.constants.AddressZero;

export const SCHEMA_CONTEXT = 'http://schema.org/';

export const PRIVATE_ASSERTION_PREDICATE =
    'https://ontology.origintrail.io/dkg/1.0#privateMerkleRoot';

export const TRIPLE_ANNOTATION_LABEL_PREDICATE = 'https://ontology.origintrail.io/dkg/1.0#label';

export const PRIVATE_RESOURCE_PREDICATE =
    'https://ontology.origintrail.io/dkg/1.0#representsPrivateResource';

export const PRIVATE_HASH_SUBJECT_PREFIX = 'https://ontology.origintrail.io/dkg/1.0#metadata-hash:';

export const UAL_PREDICATE = '<https://ontology.origintrail.io/dkg/1.0#UAL>';

export const COMMIT_BLOCK_DURATION_IN_BLOCKS = 5;

export const COMMITS_DELAY_BETWEEN_NODES_IN_BLOCKS = 5;

export const TRANSACTION_POLLING_TIMEOUT_MILLIS = 300 * 1000;

export const SOLIDITY_ERROR_STRING_PREFIX = '0x08c379a0';

export const SOLIDITY_PANIC_CODE_PREFIX = '0x4e487b71';

export const SOLIDITY_PANIC_REASONS = {
    0x1: 'Assertion error',
    0x11: 'Arithmetic operation underflowed or overflowed outside of an unchecked block',
    0x12: 'Division or modulo division by zero',
    0x21: 'Tried to convert a value into an enum, but the value was too big or negative',
    0x22: 'Incorrectly encoded storage byte array',
    0x31: '.pop() was called on an empty array',
    0x32: 'Array accessed at an out-of-bounds or negative index',
    0x41: 'Too much memory was allocated, or an array was created that is too large',
    0x51: 'Called a zero-initialized variable of internal function type',
};

export const LIBP2P_KEY_DIRECTORY = 'libp2p';

export const LIBP2P_KEY_FILENAME = 'privateKey';

export const BLS_KEY_DIRECTORY = 'bls';

export const BLS_KEY_FILENAME = 'secretKey';

export const TRIPLE_STORE_CONNECT_MAX_RETRIES = 10;

export const COMMAND_PRIORITY = {
    HIGHEST: 0,
    HIGH: 1,
    MEDIUM: 5,
    LOW: 10,
    LOWEST: 20,
};

export const DEFAULT_COMMAND_PRIORITY = COMMAND_PRIORITY.MEDIUM;

export const DEFAULT_BLOCKCHAIN_EVENT_SYNC_PERIOD_IN_MILLS = 15 * 24 * 60 * 60 * 1000; // 15 days

export const MAX_BLOCKCHAIN_EVENT_SYNC_OF_HISTORICAL_BLOCKS_IN_MILLS = 60 * 60 * 1000; // 1 hour

export const MAXIMUM_NUMBERS_OF_BLOCKS_TO_FETCH = 50;

export const TRANSACTION_QUEUE_CONCURRENCY = 1;

export const TRIPLE_STORE_CONNECT_RETRY_FREQUENCY = 10;

export const MAX_FILE_SIZE = 524288000;

export const GET_STATES = { LATEST: 'LATEST', FINALIZED: 'LATEST_FINALIZED' };

export const BYTES_IN_KILOBYTE = 1024;

export const BYTES_IN_MEGABYTE = BYTES_IN_KILOBYTE * BYTES_IN_KILOBYTE;

export const PUBLISH_TYPES = { ASSERTION: 'assertion', ASSET: 'asset', INDEX: 'index' };

export const DEFAULT_GET_STATE = GET_STATES.LATEST;

export const PEER_OFFLINE_LIMIT = 24 * 60 * 60 * 1000;

export const CONTENT_ASSET_HASH_FUNCTION_ID = 1;

export const PARANET_SYNC_KA_COUNT = 50;
export const PARANET_SYNC_RETRIES_LIMIT = 3;
export const PARANET_SYNC_RETRY_DELAY_MS = 60 * 1000;

export const PARANET_ACCESS_POLICY = {
    OPEN: 0,
    CURATED: 1,
};

export const TRIPLE_STORE_REPOSITORIES = {
    DKG: 'dkg',
};

export const BASE_NAMED_GRAPHS = {
    UNIFIED: 'unified:graph',
    HISTORICAL_UNIFIED: 'historical-unified:graph',
    METADATA: 'metadata:graph',
};

export const PENDING_STORAGE_REPOSITORIES = {
    PUBLIC: 'public',
    PRIVATE: 'private',
};

export const REQUIRED_MODULES = [
    'repository',
    'httpClient',
    'network',
    'validation',
    'blockchain',
    'tripleStore',
    'blockchainEventsService',
];

/**
 * Triple store media types
 * @type {{APPLICATION_JSON: string, N_QUADS: string, SPARQL_RESULTS_JSON: string, LD_JSON: string}}
 */
export const MEDIA_TYPES = {
    LD_JSON: 'application/ld+json',
    N_QUADS: 'application/n-quads',
    SPARQL_RESULTS_JSON: 'application/sparql-results+json',
};

/**
 * XML data types
 * @type {{FLOAT: string, DECIMAL: string, DOUBLE: string, BOOLEAN: string, INTEGER: string}}
 */
export const XML_DATA_TYPES = {
    DECIMAL: 'http://www.w3.org/2001/XMLSchema#decimal',
    FLOAT: 'http://www.w3.org/2001/XMLSchema#float',
    DOUBLE: 'http://www.w3.org/2001/XMLSchema#double',
    INTEGER: 'http://www.w3.org/2001/XMLSchema#integer',
    BOOLEAN: 'http://www.w3.org/2001/XMLSchema#boolean',
};

export const MIN_NODE_VERSION = 16;

export const NETWORK_API_RATE_LIMIT = {
    TIME_WINDOW_MILLS: 1 * 60 * 1000,
    MAX_NUMBER: 100,
};

export const NETWORK_API_SPAM_DETECTION = {
    TIME_WINDOW_MILLS: 1 * 60 * 1000,
    MAX_NUMBER: 150,
};

export const NETWORK_API_BLACK_LIST_TIME_WINDOW_MINUTES = 60;

export const HIGH_TRAFFIC_OPERATIONS_NUMBER_PER_HOUR = 16000;

export const SHARDING_TABLE_CHECK_COMMAND_FREQUENCY_MILLS = 10 * 1000; // 10 seconds

export const PARANET_SYNC_FREQUENCY_MILLS = 1 * 60 * 1000;

export const SEND_TELEMETRY_COMMAND_FREQUENCY_MINUTES = 15;

export const PEER_RECORD_UPDATE_DELAY = 30 * 60 * 1000; // 30 minutes

export const DEFAULT_COMMAND_CLEANUP_TIME_MILLS = 4 * 24 * 60 * 60 * 1000;

export const REMOVE_SESSION_COMMAND_DELAY = 2 * 60 * 1000;

export const OPERATION_IDS_COMMAND_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;

export const GET_LATEST_SERVICE_AGREEMENT_FREQUENCY_MILLS = 30 * 1000;

export const DIAL_PEERS_COMMAND_FREQUENCY_MILLS = 30 * 1000;

export const DIAL_PEERS_CONCURRENCY = 10;

export const MIN_DIAL_FREQUENCY_MILLIS = 60 * 60 * 1000;

export const PERMANENT_COMMANDS = [
    'eventListenerCommand',
    'otnodeUpdateCommand',
    'sendTelemetryCommand',
    'shardingTableCheckCommand',
    'operationIdCleanerCommand',
    'commandsCleanerCommand',
    'dialPeersCommand',
    'blockchainEventCleanerCommand',
    'getCleanerCommand',
    'getResponseCleanerCommand',
    'publishCleanerCommand',
    'publishResponseCleanerCommand',
    'updateCleanerCommand',
    'updateResponseCleanerCommand',
    'startParanetSyncCommands',
    'pendingStorageCleanerCommand',
];

export const MAX_COMMAND_DELAY_IN_MILLS = 14400 * 60 * 1000; // 10 days

export const DEFAULT_COMMAND_REPEAT_INTERVAL_IN_MILLS = 5000; // 5 seconds

export const DEFAULT_COMMAND_DELAY_IN_MILLS = 60 * 1000; // 60 seconds

export const TRANSACTION_PRIORITY = {
    HIGHEST: 0,
    HIGH: 1,
    MEDIUM: 5,
    LOW: 10,
    LOWEST: 20,
};

export const V0_PRIVATE_ASSERTION_PREDICATE =
    'https://ontology.origintrail.io/dkg/1.0#privateAssertionID';

const require = createRequire(import.meta.url);

export const ABIs = {
    ContentAsset: require('dkg-evm-module/abi/ContentAssetV2.json'),
    ContentAssetStorage: require('dkg-evm-module/abi/ContentAssetStorageV2.json'),
    AssertionStorage: require('dkg-evm-module/abi/AssertionStorage.json'),
    Staking: require('dkg-evm-module/abi/Staking.json'),
    StakingStorage: require('dkg-evm-module/abi/StakingStorage.json'),
    Token: require('dkg-evm-module/abi/Token.json'),
    HashingProxy: require('dkg-evm-module/abi/HashingProxy.json'),
    Hub: require('dkg-evm-module/abi/Hub.json'),
    IdentityStorage: require('dkg-evm-module/abi/IdentityStorage.json'),
    Log2PLDSF: require('dkg-evm-module/abi/Log2PLDSF.json'),
    ParametersStorage: require('dkg-evm-module/abi/ParametersStorage.json'),
    Profile: require('dkg-evm-module/abi/Profile.json'),
    ProfileStorage: require('dkg-evm-module/abi/ProfileStorage.json'),
    ScoringProxy: require('dkg-evm-module/abi/ScoringProxy.json'),
    ServiceAgreementV1: require('dkg-evm-module/abi/ServiceAgreementV1.json'),
    CommitManagerV1: require('dkg-evm-module/abi/CommitManagerV2.json'),
    CommitManagerV1U1: require('dkg-evm-module/abi/CommitManagerV2U1.json'),
    ProofManagerV1: require('dkg-evm-module/abi/ProofManagerV1.json'),
    ProofManagerV1U1: require('dkg-evm-module/abi/ProofManagerV1U1.json'),
    ShardingTable: require('dkg-evm-module/abi/ShardingTableV2.json'),
    ShardingTableStorage: require('dkg-evm-module/abi/ShardingTableStorageV2.json'),
    ServiceAgreementStorageProxy: require('dkg-evm-module/abi/ServiceAgreementStorageProxy.json'),
    UnfinalizedStateStorage: require('dkg-evm-module/abi/UnfinalizedStateStorage.json'),
    LinearSum: require('dkg-evm-module/abi/LinearSum.json'),
    ParanetsRegistry: require('dkg-evm-module/abi/ParanetsRegistry.json'),
    ParanetKnowledgeAssetsRegistry: require('dkg-evm-module/abi/ParanetKnowledgeAssetsRegistry.json'),
};

export const CONTRACT_FUNCTION_PRIORITY = {
    'submitCommit((address,uint256,bytes,uint8,uint16,uint72,uint72,uint72))':
        TRANSACTION_PRIORITY.MEDIUM,
    'submitCommit((address,uint256,bytes,uint8,uint16))': TRANSACTION_PRIORITY.MEDIUM,
    'submitUpdateCommit((address,uint256,bytes,uint8,uint16,uint72,uint72,uint72))':
        TRANSACTION_PRIORITY.HIGH,
    'submitUpdateCommit((address,uint256,bytes,uint8,uint16))': TRANSACTION_PRIORITY.HIGH,
    sendProof: TRANSACTION_PRIORITY.MEDIUM,
};

export const COMMAND_RETRIES = {
    SIMPLE_ASSET_SYNC: 1,
    SUBMIT_COMMIT: 5,
    SUBMIT_UPDATE_COMMIT: 5,
    SUBMIT_PROOFS: 5,
};

export const SIMPLE_ASSET_SYNC_PARAMETERS = {
    GET_RESULT_POLLING_INTERVAL_MILLIS: 1 * 1000,
    GET_RESULT_POLLING_MAX_ATTEMPTS: 30,
};

export const PARANET_SYNC_PARAMETERS = {
    GET_RESULT_POLLING_INTERVAL_MILLIS: 1 * 1000,
    GET_RESULT_POLLING_MAX_ATTEMPTS: 300,
};

export const COMMAND_TX_GAS_INCREASE_FACTORS = {
    SUBMIT_COMMIT: 1.2,
    SUBMIT_UPDATE_COMMIT: 1.2,
    SUBMIT_PROOFS: 1.2,
};

export const CONTRACT_FUNCTION_GAS_LIMIT_INCREASE_FACTORS = {
    sendProof: 2,
    'submitCommit((address,uint256,bytes,uint8,uint16))': 2,
    'submitCommit((address,uint256,bytes,uint8,uint16,uint72,uint72,uint72))': 2,
    'submitUpdateCommit((address,uint256,bytes,uint8,uint16,uint72,uint72,uint72))': 2,
    'submitUpdateCommit((address,uint256,bytes,uint8,uint16))': 2,
};

export const GNOSIS_DEFAULT_GAS_PRICE = {
    TESTNET: 25,
    MAINNET: 5,
};

export const NEURO_DEFAULT_GAS_PRICE = {
    TESTNET: 8,
    MAINNET: 8,
};

export const CONTRACT_FUNCTION_FIXED_GAS_PRICE = {
    'otp:2043': {
        SUBMIT_UPDATE_COMMIT: 30,
    },
};

export const WEBSOCKET_PROVIDER_OPTIONS = {
    reconnect: {
        auto: true,
        delay: 1000, // ms
        maxAttempts: 3,
    },
    clientConfig: {
        keepalive: true,
        keepaliveInterval: 30 * 1000, // ms
    },
};

export const TRIPLE_STORE_IMPLEMENTATION = {
    BLAZEGRAPH: 'Blazegraph',
    GRAPHDB: 'GraphDB',
    FUSEKI: 'Fuseki',
};

export const NETWORK_MESSAGE_TYPES = {
    REQUESTS: {
        PROTOCOL_REQUEST: 'PROTOCOL_REQUEST',
    },
    RESPONSES: {
        ACK: 'ACK',
        NACK: 'NACK',
        BUSY: 'BUSY',
    },
};

export const PARANET_NODES_ACCESS_POLICIES = ['OPEN', 'CURATED'];

export const NETWORK_MESSAGE_TIMEOUT_MILLS = {
    PUBLISH: {
        REQUEST: 60 * 1000,
    },
    UPDATE: {
        REQUEST: 60 * 1000,
    },
    GET: {
        REQUEST: 5 * 60 * 1000,
    },
    ASK: {
        REQUEST: 60 * 1000,
    },
    FINALITY: {
        REQUEST: 60 * 1000,
    },
};

export const MAX_OPEN_SESSIONS = 10;

export const ERROR_TYPE = {
    EVENT_LISTENER_ERROR: 'EventListenerError',
    BLOCKCHAIN_EVENT_LISTENER_ERROR: 'BlockchainEventListenerError',
    DIAL_PROTOCOL_ERROR: 'DialProtocolError',
    VALIDATE_ASSET_ERROR: 'ValidateAssetError',
    NETWORK_PROTOCOL_ERROR: 'NetworkProtocolError',
    PUBLISH: {
        PUBLISH_START_ERROR: 'PublishStartError',
        PUBLISH_ROUTE_ERROR: 'PublishRouteError',
        PUBLISH_NETWORK_START_ERROR: 'PublishNetworkStartError',
        PUBLISH_VALIDATE_ASSET_ERROR: 'PublishValidateAssetError',
        PUBLISH_LOCAL_STORE_ERROR: 'PublishLocalStoreError',
        PUBLISH_LOCAL_STORE_REMOTE_ERROR: 'PublishLocalStoreRemoteError',
        PUBLISH_FIND_NODES_ERROR: 'PublishFindNodesError',
        PUBLISH_STORE_REQUEST_ERROR: 'PublishStoreRequestError',
        PUBLISH_VALIDATE_ASSERTION_METADATA_ERROR: 'PublishValidateAssertionMetadataError',
        PUBLISH_ERROR: 'PublishError',
    },
    STORE_ASSERTION_ERROR: 'StoreAssertionError',
    UPDATE: {
        UPDATE_INIT_ERROR: 'UpdateInitError',
        UPDATE_REQUEST_ERROR: 'UpdateRequestError',
        UPDATE_START_ERROR: 'UpdateStartError',
        UPDATE_ROUTE_ERROR: 'UpdateRouteError',
        UPDATE_LOCAL_STORE_ERROR: 'UpdateLocalStoreError',
        UPDATE_LOCAL_STORE_REMOTE_ERROR: 'UpdateLocalStoreRemoteError',
        UPDATE_ERROR: 'UpdateError',
        UPDATE_STORE_INIT_ERROR: 'UpdateStoreInitError',
        UPDATE_REMOTE_ERROR: 'UpdateRemoteError',
        UPDATE_DELETE_PENDING_STATE_ERROR: 'UpdateDeletePendingStateError',
        UPDATE_VALIDATE_ASSET_ERROR: 'UpdateValidateAssetError',
        UPDATE_STORE_REQUEST_ERROR: 'UpdateStoreRequestError',
        UPDATE_VALIDATE_ASSERTION_METADATA_ERROR: 'UpadateValidateAssertionMetadataError',
        UPDATE_ASSERTION_ERROR: 'UpdateAssertionError',
    },
    GET: {
        GET_ROUTE_ERROR: 'GetRouteError',
        GET_ASSERTION_ID_ERROR: 'GetAssertionIdError',
        GET_PRIVATE_ASSERTION_ID_ERROR: 'GetPrivateAssertionIdError',
        GET_VALIDATE_ASSET_ERROR: 'GetValidateAssetError',
        GET_LOCAL_ERROR: 'GetLocalError',
        GET_NETWORK_ERROR: 'GetNetworkError',
        GET_CURATED_PARANET_NETWORK_ERROR: 'GetCuratedParanetNetworkError',
        GET_START_ERROR: 'GetStartError',
        GET_INIT_ERROR: 'GetInitError',
        GET_REQUEST_ERROR: 'GetRequestError',
        GET_INIT_REMOTE_ERROR: 'GetInitRemoteError',
        GET_REQUEST_REMOTE_ERROR: 'GetRequestRemoteError',
        GET_ERROR: 'GetError',
    },
    LOCAL_STORE: {
        LOCAL_STORE_ERROR: 'LocalStoreError',
    },
    QUERY: {
        LOCAL_QUERY_ERROR: 'LocalQueryError',
    },
    COMMIT_PROOF: {
        CALCULATE_PROOFS_ERROR: 'CalculateProofsError',
        EPOCH_CHECK_ERROR: 'EpochCheckError',
        BLOCKCHAIN_EPOCH_CHECK_ERROR: 'BlockchainEpochCheckError',
        SIMPLE_ASSET_SYNC_ERROR: 'SimpleAssetSyncError',
        SUBMIT_COMMIT_ERROR: 'SubmitCommitError',
        SUBMIT_COMMIT_SEND_TX_ERROR: 'SubmitCommitSendTxError',
        SUBMIT_PROOFS_ERROR: 'SubmitProofsError',
        SUBMIT_PROOFS_SEND_TX_ERROR: 'SubmitProofsSendTxError',
        SUBMIT_UPDATE_COMMIT_ERROR: 'SubmitUpdateCommitError',
        SUBMIT_UPDATE_COMMIT_SEND_TX_ERROR: 'SubmitUpdateCommitSendTxError',
    },
    GET_BID_SUGGESTION: {
        UNSUPPORTED_BID_SUGGESTION_RANGE_ERROR: 'UnsupportedBidSuggestionRangeError',
    },
    PARANET: {
        START_PARANET_SYNC_ERROR: 'StartParanetSyncError',
        PARANET_SYNC_ERROR: 'ParanetSyncError',
    },
    FIND_SHARD: {
        FIND_SHARD_ERROR: 'FindShardError',
        PUBLISH_FIND_SHARD_ERROR: 'PublishFindShardError',
        UPDATE_FIND_SHARD_ERROR: 'UpdateFindShardError',
        GET_FIND_SHARD_ERROR: 'GetFindShardError',
    },
    ASK: {
        ASK_ERROR: 'AskError',
        ASK_NETWORK_ERROR: 'AskNetworkError',
        ASK_REQUEST_ERROR: 'AskRequestError',
        ASK_REQUEST_REMOTE_ERROR: 'AskRequestRemoteError',
        ASK_FIND_SHARD_ERROR: 'AskFindShardError',
    },
    PUBLISH_FINALIZATION: {
        PUBLISH_FINALIZATION_NO_CACHED_DATA: 'PublishFinalizationNoCachedData',
    },
    UPDATE_FINALIZATION: {
        UPDATE_FINALIZATION_NO_CACHED_DATA: 'UpdateFinalizationNoCachedData',
        UPDATE_FINALIZATION_NO_OLD_DATA: 'UpdateFinalizationNoOldData',
    },
    FINALITY: {
        FINALITY_ERROR: 'FinalityError',
        FINALITY_NETWORK_ERROR: 'FinalityNetworkError',
        FINALITY_REQUEST_ERROR: 'FinalityRequestError',
        FINALITY_REQUEST_REMOTE_ERROR: 'FinalityRequestRemoteError',
        FINALITY_START_ERROR: 'FinalityStartError',
    },
};
export const OPERATION_ID_STATUS = {
    PENDING: 'PENDING',
    FAILED: 'FAILED',
    COMPLETED: 'COMPLETED',
    FIND_NODES_START: 'FIND_NODES_START',
    FIND_NODES_END: 'FIND_NODES_END',
    FIND_NODES_FIND_SHARD_NODES_START: 'FIND_NODES_FIND_SHARD_NODES_START',
    FIND_NODES_FIND_SHARD_NODES_END: 'FIND_NODES_FIND_SHARD_NODES_END',
    FIND_CURATED_PARANET_NODES_START: 'FIND_CURATED_PARANET_NODES_START',
    FIND_CURATED_PARANET_NODES_END: 'FIND_CURATED_PARANET_NODES_END',
    FIND_NODES_PROCESS_FOUND_NODES_START: 'FIND_NODES_PROCESS_FOUND_NODES_START',
    FIND_NODES_PROCESS_FOUND_NODES_END: 'FIND_NODES_PROCESS_FOUND_NODES_END',
    DIAL_PROTOCOL_START: 'DIAL_PROTOCOL_START',
    DIAL_PROTOCOL_END: 'DIAL_PROTOCOL_END',
    VALIDATE_ASSET_START: 'VALIDATE_ASSET_START',
    VALIDATE_ASSET_END: 'VALIDATE_ASSET_END',
    VALIDATE_ASSET_BLOCKCHAIN_START: 'VALIDATE_ASSET_BLOCKCHAIN_START',
    VALIDATE_ASSET_BLOCKCHAIN_END: 'VALIDATE_ASSET_BLOCKCHAIN_END',
    NETWORK_PROTOCOL_START: 'NETWORK_PROTOCOL_START',
    NETWORK_PROTOCOL_END: 'NETWORK_PROTOCOL_END',
    PROTOCOL_SCHEDULE_MESSAGE_START: 'PROTOCOL_SCHEDULE_MESSAGE_START',
    PROTOCOL_SCHEDULE_MESSAGE_END: 'PROTOCOL_SCHEDULE_MESSAGE_END',
    PROTOCOL_PREPARE_MESSAGE_START: 'PROTOCOL_PREPARE_MESSAGE_START',
    PROTOCOL_PREPARE_MESSAGE_END: 'PROTOCOL_PREPARE_MESSAGE_END',
    PROTOCOL_SEND_MESSAGE_START: 'PROTOCOL_SEND_MESSAGE_START',
    PROTOCOL_SEND_MESSAGE_END: 'PROTOCOL_SEND_MESSAGE_END',
    HANDLE_PROTOCOL_MESSAGE_START: 'HANDLE_PROTOCOL_MESSAGE_START',
    HANDLE_PROTOCOL_MESSAGE_END: 'HANDLE_PROTOCOL_MESSAGE_END',
    HANDLE_PROTOCOL_MESSAGE_SEND_MESSAGE_RESPONSE_START:
        'HANDLE_PROTOCOL_MESSAGE_SEND_MESSAGE_RESPONSE_START',
    HANDLE_PROTOCOL_MESSAGE_SEND_MESSAGE_RESPONSE_END:
        'HANDLE_PROTOCOL_MESSAGE_SEND_MESSAGE_RESPONSE_END',
    HANDLE_PROTOCOL_MESSAGE_REMOVE_CACHED_SESSION_START:
        'HANDLE_PROTOCOL_MESSAGE_REMOVE_CACHED_SESSION_START',
    HANDLE_PROTOCOL_MESSAGE_REMOVE_CACHED_SESSION_END:
        'HANDLE_PROTOCOL_MESSAGE_REMOVE_CACHED_SESSION_END',
    HANDLE_PROTOCOL_MESSAGE_PREPARE_MESSAGE_START: 'HANDLE_PROTOCOL_MESSAGE_PREPARE_MESSAGE_START',
    HANDLE_PROTOCOL_MESSAGE_PREPARE_MESSAGE_END: 'HANDLE_PROTOCOL_MESSAGE_PREPARE_MESSAGE_END',
    PUBLISH_LOCAL_STORE_REMOTE_SEND_MESSAGE_RESPONSE_START:
        'PUBLISH_LOCAL_STORE_REMOTE_SEND_MESSAGE_RESPONSE_START',
    PUBLISH_LOCAL_STORE_REMOTE_SEND_MESSAGE_RESPONSE_END:
        'PUBLISH_LOCAL_STORE_REMOTE_SEND_MESSAGE_RESPONSE_END',
    PUBLISH: {
        PUBLISH_CACHE_OPERATION_ID_DATA_TO_MEMORY_START:
            'PUBLISH_CACHE_OPERATION_ID_DATA_TO_MEMORY_START',
        PUBLISH_CACHE_OPERATION_ID_DATA_TO_MEMORY_END:
            'PUBLISH_CACHE_OPERATION_ID_DATA_TO_MEMORY_END',
        PUBLISH_CACHE_OPERATION_ID_DATA_TO_FILE_START:
            'PUBLISH_CACHE_OPERATION_ID_DATA_TO_FILE_START',
        PUBLISH_CACHE_OPERATION_ID_DATA_TO_FILE_END: 'PUBLISH_CACHE_OPERATION_ID_DATA_TO_FILE_END',
        PUBLISH_CACHE_DATASET_START: 'PUBLISH_CACHE_DATASET_START',
        PUBLISH_CACHE_DATASET_END: 'PUBLISH_CACHE_DATASET_END',
        PUBLISH_GET_CACHED_OPERATION_ID_DATA_START: 'PUBLISH_GET_CACHED_OPERATION_ID_DATA_START',
        PUBLISH_GET_CACHED_OPERATION_ID_DATA_END: 'PUBLISH_GET_CACHED_OPERATION_ID_DATA_END',
        PUBLISH_VALIDATE_DATASET_ROOT_START: 'PUBLISH_VALIDATE_DATASET_ROOT_START',
        PUBLISH_VALIDATE_DATASET_ROOT_END: 'PUBLISH_VALIDATE_DATASET_ROOT_END',
        PUBLISH_ADD_SIGNATURE_TO_STORAGE_START: 'PUBLISH_ADD_SIGNATURE_TO_STORAGE_START',
        PUBLISH_ADD_SIGNATURE_TO_STORAGE_END: 'PUBLISH_ADD_SIGNATURE_TO_STORAGE_END',
        VALIDATING_PUBLISH_ASSERTION_REMOTE_START: 'VALIDATING_PUBLISH_ASSERTION_REMOTE_START',
        VALIDATING_PUBLISH_ASSERTION_REMOTE_END: 'VALIDATING_PUBLISH_ASSERTION_REMOTE_END',
        PUBLISH_VALIDATE_ASSET_START: 'PUBLISH_VALIDATE_ASSET_START',
        PUBLISH_VALIDATE_ASSET_END: 'PUBLISH_VALIDATE_ASSET_END',
        PUBLISH_VALIDATE_ASSET_PARANET_EXISTS_START: 'PUBLISH_VALIDATE_ASSET_PARANET_EXISTS_START',
        PUBLISH_VALIDATE_ASSET_PARANET_EXISTS_END: 'PUBLISH_VALIDATE_ASSET_PARANET_EXISTS_END',
        PUBLISH_VALIDATE_ASSET_NODES_ACCESS_POLICY_CHECK_START:
            'PUBLISH_VALIDATE_ASSET_NODES_ACCESS_POLICY_CHECK_START',
        PUBLISH_VALIDATE_ASSET_NODES_ACCESS_POLICY_CHECK_END:
            'PUBLISH_VALIDATE_ASSET_NODES_ACCESS_POLICY_CHECK_END',
        INSERTING_ASSERTION: 'INSERTING_ASSERTION',
        PUBLISHING_ASSERTION: 'PUBLISHING_ASSERTION',
        PUBLISH_START: 'PUBLISH_START',
        PUBLISH_INIT_START: 'PUBLISH_INIT_START',
        PUBLISH_INIT_END: 'PUBLISH_INIT_END',
        PUBLISH_LOCAL_STORE_REMOTE_CACHE_DATASET_START:
            'PUBLISH_LOCAL_STORE_REMOTE_CACHE_DATASET_START',
        PUBLISH_LOCAL_STORE_REMOTE_CACHE_DATASET_END:
            'PUBLISH_LOCAL_STORE_REMOTE_CACHE_DATASET_END',
        PUBLISH_LOCAL_STORE_REMOTE_SIGN_START: 'PUBLISH_LOCAL_STORE_REMOTE_SIGN_START',
        PUBLISH_LOCAL_STORE_REMOTE_SIGN_END: 'PUBLISH_LOCAL_STORE_REMOTE_SIGN_END',
        PUBLISH_REPLICATE_START: 'PUBLISH_REPLICATE_START',
        PUBLISH_REPLICATE_END: 'PUBLISH_REPLICATE_END',
        PUBLISH_FIND_NODES_START: 'PUBLISH_FIND_NODES_START',
        PUBLISH_FIND_NODES_END: 'PUBLISH_FIND_NODES_END',
        PUBLISH_FIND_NODES_FIND_SHARD_NODES_START: 'PUBLISH_FIND_NODES_FIND_SHARD_NODES_START',
        PUBLISH_FIND_NODES_FIND_SHARD_NODES_END: 'PUBLISH_FIND_NODES_FIND_SHARD_NODES_END',
        PUBLISH_FIND_NODES_PROCESS_FOUND_NODES_START:
            'PUBLISH_FIND_NODES_PROCESS_FOUND_NODES_START',
        PUBLISH_FIND_NODES_PROCESS_FOUND_NODES_END: 'PUBLISH_FIND_NODES_PROCESS_FOUND_NODES_END',
        PUBLISH_END: 'PUBLISH_END',
        PUBLISH_NETWORK_START: 'NETWORK_PUBLISH_START',
        PUBLISH_NETWORK_END: 'NETWORK_PUBLISH_END',
        PUBLISH_REQUEST_START: 'PUBLISH_REQUEST_START',
        PUBLISH_REQUEST_END: 'PUBLISH_REQUEST_END',
        PUBLISH_REQUEST_PREPARE_MESSAGE_START: 'PUBLISH_REQUEST_PREPARE_MESSAGE_START',
        PUBLISH_REQUEST_PREPARE_MESSAGE_END: 'PUBLISH_REQUEST_PREPARE_MESSAGE_END',
        PUBLISH_SEND_MESSAGE_START: 'PUBLISH_SEND_MESSAGE_START',
        PUBLISH_SEND_MESSAGE_END: 'PUBLISH_SEND_MESSAGE_END',
        PUBLISH_LOCAL_STORE_REMOTE_START: 'PUBLISH_LOCAL_STORE_REMOTE_START',
        PUBLISH_LOCAL_STORE_REMOTE_END: 'PUBLISH_LOCAL_STORE_REMOTE_END',
        PUBLISH_VALIDATE_ASSET_REMOTE_START: 'VALIDATE_ASSET_REMOTE_START',
        PUBLISH_VALIDATE_ASSET_REMOTE_END: 'VALIDATE_ASSET_REMOTE_END',
        PUBLISH_LOCAL_STORE_REMOTE_SEND_RESPONSE_START:
            'PUBLISH_LOCAL_STORE_REMOTE_SEND_RESPONSE_START',
        PUBLISH_LOCAL_STORE_REMOTE_SEND_RESPONSE_END:
            'PUBLISH_LOCAL_STORE_REMOTE_SEND_RESPONSE_END',
        PUBLISH_LOCAL_STORE_REMOTE_REMOVE_CACHED_SESSION_START:
            'PUBLISH_LOCAL_STORE_REMOTE_REMOVE_CACHED_SESSION_START',
        PUBLISH_LOCAL_STORE_REMOTE_REMOVE_CACHED_SESSION_END:
            'PUBLISH_LOCAL_STORE_REMOTE_REMOVE_CACHED_SESSION_END',
        PUBLISH_LOCAL_STORE_REMOTE_PREPARE_MESSAGE_START:
            'PUBLISH_LOCAL_STORE_REMOTE_PREPARE_MESSAGE_START',
        PUBLISH_LOCAL_STORE_REMOTE_PREPARE_MESSAGE_END:
            'PUBLISH_LOCAL_STORE_REMOTE_PREPARE_MESSAGE_END',
    },
    PUBLISH_FINALIZATION: {
        PUBLISH_FINALIZATION_START: 'PUBLISH_FINALIZATION_START',
        PUBLISH_FINALIZATION_METADATA_VALIDATION_START:
            'PUBLISH_FINALIZATION_METADATA_VALIDATION_START',
        PUBLISH_FINALIZATION_METADATA_VALIDATION_END:
            'PUBLISH_FINALIZATION_METADATA_VALIDATION_END',
        PUBLISH_FINALIZATION_STORE_ASSERTION_START: 'PUBLISH_FINALIZATION_STORE_ASSERTION_START',
        PUBLISH_FINALIZATION_STORE_ASSERTION_END: 'PUBLISH_FINALIZATION_STORE_ASSERTION_END',
        PUBLISH_FINALIZATION_END: 'PUBLISH_FINALIZATION_END',
    },
    UPDATE_FINALIZATION: {
        UPDATE_FINALIZATION_START: 'UPDATE_FINALIZATION_START',
        UPDATE_FINALIZATION_METADATA_VALIDATION_START:
            'UPDATE_FINALIZATION_METADATA_VALIDATION_START',
        UPDATE_FINALIZATION_METADATA_VALIDATION_END: 'UPDATE_FINALIZATION_METADATA_VALIDATION_END',
        UPDATE_FINALIZATION_STORE_ASSERTION_START: 'UPDATE_FINALIZATION_STORE_ASSERTION_START',
        UPDATE_FINALIZATION_STORE_ASSERTION_END: 'UPDATE_FINALIZATION_STORE_ASSERTION_END',
        UPDATE_FINALIZATION_END: 'UPDATE_FINALIZATION_END',
    },
    UPDATE: {
        UPDATE_START: 'UPDATE_START',
        UPDATE_INIT_START: 'UPDATE_INIT_START',
        UPDATE_INIT_END: 'UPDATE_INIT_END',
        UPDATE_REPLICATE_START: 'UPDATE_REPLICATE_START',
        UPDATE_REPLICATE_END: 'UPDATE_REPLICATE_END',
        UPDATE_FIND_NODES_START: 'UPDATE_FIND_NODES_START',
        UPDATE_FIND_NODES_END: 'UPDATE_FIND_NODES_END',
        UPDATE_FIND_NODES_FIND_SHARD_NODES_START: 'UPDATE_FIND_NODES_FIND_SHARD_NODES_START',
        UPDATE_FIND_NODES_FIND_SHARD_NODES_END: 'UPDATE_FIND_NODES_FIND_SHARD_NODES_END',
        UPDATE_FIND_NODES_PROCESS_FOUND_NODES_START: 'UPDATE_FIND_NODES_PROCESS_FOUND_NODES_START',
        UPDATE_FIND_NODES_PROCESS_FOUND_NODES_END: 'UPDATE_FIND_NODES_PROCESS_FOUND_NODES_END',
        VALIDATING_UPDATE_ASSERTION_REMOTE_START: 'VALIDATING_UPDATE_ASSERTION_REMOTE_START',
        VALIDATING_UPDATE_ASSERTION_REMOTE_END: 'VALIDATING_UPDATE_ASSERTION_REMOTE_END',
        UPDATE_END: 'UPDATE_END',
        UPDATE_VALIDATE_ASSET_START: 'UPDATE_VALIDATE_ASSET_START',
        UPDATE_VALIDATE_ASSET_END: 'UPDATE_VALIDATE_ASSET_END',
        UPDATE_GET_CACHED_OPERATION_ID_DATA_START: 'UPDATE_GET_CACHED_OPERATION_ID_DATA_START',
        UPDATE_GET_CACHED_OPERATION_ID_DATA_END: 'UPDATE_GET_CACHED_OPERATION_ID_DATA_END',
        UPDATE_VALIDATE_DATASET_ROOT_START: 'UPDATE_VALIDATE_DATASET_ROOT_START',
        UPDATE_VALIDATE_DATASET_ROOT_END: 'UPDATE_VALIDATE_DATASET_ROOT_END',
        UPDATE_NETWORK_START_ERROR: 'UPDATE_NETWORK_START_ERROR',
        UPDATE_NETWORK_START: 'UPDATE_NETWORK_START',
        UPDATE_NETWORK_END: 'UPDATE_NETWORK_END',
        UPDATE_REQUEST_START: 'UPDATE_REQUEST_START',
        UPDATE_REQUEST_END: 'UPDATE_REQUEST_END',
        UPDATE_REQUEST_PREPARE_MESSAGE_START: 'UPDATE_REQUEST_PREPARE_MESSAGE_START',
        UPDATE_REQUEST_PREPARE_MESSAGE_END: 'UPDATE_REQUEST_PREPARE_MESSAGE_END',
        UPDATE_SEND_MESSAGE_START: 'UPDATE_SEND_MESSAGE_START',
        UPDATE_SEND_MESSAGE_END: 'UPDATE_SEND_MESSAGE_END',
        UPDATE_ADD_SIGNATURE_TO_STORAGE_START: 'UPDATE_ADD_SIGNATURE_TO_STORAGE_START',
        UPDATE_ADD_SIGNATURE_TO_STORAGE_END: 'UPDATE_ADD_SIGNATURE_TO_STORAGE_END',
        UPDATE_LOCAL_STORE_REMOTE_START: 'UPDATE_LOCAL_STORE_REMOTE_START',
        UPDATE_LOCAL_STORE_REMOTE_END: 'UPDATE_LOCAL_STORE_REMOTE_END',
        UPDATE_LOCAL_STORE_REMOTE_PREPARE_MESSAGE_START:
            'UPDATE_LOCAL_STORE_REMOTE_PREPARE_MESSAGE_START',
        UPDATE_LOCAL_STORE_REMOTE_PREPARE_MESSAGE_END:
            'UPDATE_LOCAL_STORE_REMOTE_PREPARE_MESSAGE_END',
        UPDATE_LOCAL_STORE_REMOTE_SEND_RESPONSE_START:
            'UPDATE_LOCAL_STORE_REMOTE_SEND_RESPONSE_START',
        UPDATE_LOCAL_STORE_REMOTE_SEND_RESPONSE_END: 'UPDATE_LOCAL_STORE_REMOTE_SEND_RESPONSE_END',
        UPDATE_LOCAL_STORE_REMOTE_REMOVE_CACHED_SESSION_START:
            'UPDATE_LOCAL_STORE_REMOTE_REMOVE_CACHED_SESSION_START',
        UPDATE_LOCAL_STORE_REMOTE_REMOVE_CACHED_SESSION_END:
            'UPDATE_LOCAL_STORE_REMOTE_REMOVE_CACHED_SESSION_END',
        UPDATE_VALIDATE_ASSET_REMOTE_START: 'UPDATE_VALIDATE_ASSET_REMOTE_START',
        UPDATE_VALIDATE_ASSET_REMOTE_END: 'UPDATE_VALIDATE_ASSET_REMOTE_END',
        UPDATE_LOCAL_STORE_REMOTE_CACHE_DATASET_START:
            'UPDATE_LOCAL_STORE_REMOTE_CACHE_DATASET_START',
        UPDATE_LOCAL_STORE_REMOTE_CACHE_DATASET_END: 'UPDATE_LOCAL_STORE_REMOTE_CACHE_DATASET_END',
        UPDATE_LOCAL_STORE_REMOTE_SIGN_START: 'UPDATE_LOCAL_STORE_REMOTE_SIGN_START',
        UPDATE_LOCAL_STORE_REMOTE_SIGN_END: 'UPDATE_LOCAL_STORE_REMOTE_SIGN_END',
    },
    GET: {
        ASSERTION_EXISTS_LOCAL_START: 'ASSERTION_EXISTS_LOCAL_START',
        ASSERTION_EXISTS_LOCAL_END: 'ASSERTION_EXISTS_LOCAL_END',
        GET_START: 'GET_START',
        GET_INIT_START: 'GET_INIT_START',
        GET_INIT_END: 'GET_INIT_END',
        GET_VALIDATE_ASSET_START: 'GET_VALIDATE_ASSET_START',
        GET_VALIDATE_ASSET_END: 'GET_VALIDATE_ASSET_END',
        GET_LOCAL_START: 'GET_LOCAL_START',
        GET_LOCAL_END: 'GET_LOCAL_END',
        GET_REMOTE_START: 'GET_REMOTE_START',
        GET_REMOTE_END: 'GET_REMOTE_END',
        GET_FETCH_FROM_NODES_START: 'GET_FETCH_FROM_NODES_START',
        GET_FETCH_FROM_NODES_END: 'GET_FETCH_FROM_NODES_END',
        GET_FIND_NODES_START: 'GET_FIND_NODES_START',
        GET_FIND_NODES_END: 'PUBLISH_FIND_NODES_END',
        GET_FIND_NODES_FIND_SHARD_NODES_START: 'GET_FIND_NODES_FIND_SHARD_NODES_START',
        GET_FIND_NODES_FIND_SHARD_NODES_END: 'GET_FIND_NODES_FIND_SHARD_NODES_END',
        GET_NETWORK_START: 'GET_NETWORK_START',
        GET_NETWORK_END: 'GET_NETWORK_END',
        GET_VALIDATE_UAL_START: 'GET_VALIDATE_UAL_START',
        GET_VALIDATE_UAL_END: 'GET_VALIDATE_UAL_END',
        GET_LOCAL_GET_ASSERTION_START: 'GET_LOCAL_GET_ASSERTION_START',
        GET_LOCAL_GET_ASSERTION_END: 'GET_LOCAL_GET_ASSERTION_END',
        GET_LOCAL_GET_ASSERTION_METADATA_START: 'GET_LOCAL_GET_ASSERTION_METADATA_START',
        GET_LOCAL_GET_ASSERTION_METADATA_END: 'GET_LOCAL_GET_ASSERTION_METADATA_END',
        GET_REQUEST_START: 'GET_REQUEST_START',
        GET_REQUEST_END: 'GET_REQUEST_END',
        GET_REQUEST_SEND_MESSAGE_START: 'GET_REQUEST_SEND_MESSAGE_START',
        GET_REQUEST_SEND_MESSAGE_END: 'GET_REQUEST_SEND_MESSAGE_END',
        GET_REQUEST_PREPARE_MESSAGE_START: 'GET_REQUEST_PREPARE_MESSAGE_START',
        GET_REQUEST_PREPARE_MESSAGE_END: 'GET_REQUEST_PREPARE_MESSAGE_END',
        GET_REMOTE_PREPARE_MESSAGE_START: 'GET_REMOTE_PREPARE_MESSAGE_START',
        GET_REMOTE_PREPARE_MESSAGE_END: 'GET_REMOTE_PREPARE_MESSAGE_END',
        GET_REMOTE_GET_ASSERTION_START: 'GET_REMOTE_GET_ASSERTION_START',
        GET_REMOTE_GET_ASSERTION_END: 'GET_REMOTE_GET_ASSERTION_END',
        GET_REMOTE_GET_ASSERTION_METADATA_START: 'GET_REMOTE_GET_ASSERTION_METADATA_START',
        GET_REMOTE_GET_ASSERTION_METADATA_END: 'GET_REMOTE_GET_ASSERTION_METADATA_END',
        GET_REMOTE_SEND_MESSAGE_START: 'GET_REMOTE_SEND_MESSAGE_START',
        GET_REMOTE_SEND_MESSAGE_END: 'GET_REMOTE_SEND_MESSAGE_END',
        GET_REMOTE_REMOVE_CACHED_SESSION_START: 'GET_REMOTE_REMOVE_CACHED_SESSION_START',
        GET_REMOTE_REMOVE_CACHED_SESSION_END: 'GET_REMOTE_REMOVE_CACHED_SESSION_END',
        GET_FIND_NODES_PROCESS_FOUND_NODES_START: 'GET_FIND_NODES_PROCESS_FOUND_NODES_START',
        GET_FIND_NODES_PROCESS_FOUND_NODES_END: 'GET_FIND_NODES_PROCESS_FOUND_NODES_END',
        GET_END: 'GET_END',
    },
    COMMIT_PROOF: {
        EPOCH_CHECK_START: 'EPOCH_CHECK_START',
        EPOCH_CHECK_END: 'EPOCH_CHECK_END',
        SIMPLE_ASSET_SYNC_START: 'SIMPLE_ASSET_SYNC_START',
        SIMPLE_ASSET_SYNC_END: 'SIMPLE_ASSET_SYNC_END',
        SUBMIT_COMMIT_START: 'SUBMIT_COMMIT_START',
        SUBMIT_COMMIT_END: 'SUBMIT_COMMIT_END',
        SUBMIT_COMMIT_SEND_TX_START: 'SUBMIT_COMMIT_SEND_TX_START',
        SUBMIT_COMMIT_SEND_TX_END: 'SUBMIT_COMMIT_SEND_TX_END',
        CALCULATE_PROOFS_START: 'CALCULATE_PROOFS_START',
        CALCULATE_PROOFS_END: 'CALCULATE_PROOFS_END',
        SUBMIT_PROOFS_START: 'SUBMIT_PROOFS_START',
        SUBMIT_PROOFS_END: 'SUBMIT_PROOFS_END',
        SUBMIT_PROOFS_SEND_TX_START: 'SUBMIT_PROOFS_START',
        SUBMIT_PROOFS_SEND_TX_END: 'SUBMIT_PROOFS_END',
        SUBMIT_UPDATE_COMMIT_START: 'SUBMIT_UPDATE_COMMIT_START',
        SUBMIT_UPDATE_COMMIT_END: 'SUBMIT_UPDATE_COMMIT_END',
        SUBMIT_UPDATE_COMMIT_SEND_TX_START: 'SUBMIT_UPDATE_COMMIT_START',
        SUBMIT_UPDATE_COMMIT_SEND_TX_END: 'SUBMIT_UPDATE_COMMIT_END',
    },
    QUERY: {
        QUERY_INIT_START: 'QUERY_INIT_START',
        QUERY_INIT_END: 'QUERY_INIT_END',
        QUERY_START: 'QUERY_START',
        QUERY_END: 'QUERY_END',
        QUERY_CONSTRUCT_QUERY_START: 'QUERY_CONTRCUT_QUERY_START',
        QUERY_CONSTRUCT_QUERY_END: 'QUERY_CONTRCUT_QUERY_END',
        QUERY_SELECT_QUERY_START: 'QUERY_SELECT_QUERY_START',
        QUERY_SELECT_QUERY_END: 'QUERY_SELECT_QUERY_END',
        QUERY_CACHE_OPERATION_ID_DATA_TO_MEMORY_START:
            'QUERY_CACHE_OPERATION_ID_DATA_TO_MEMORY_START',
        QUERY_CACHE_OPERATION_ID_DATA_TO_MEMORY_END: 'QUERY_CACHE_OPERATION_ID_DATA_TO_MEMORY_END',
        QUERY_CACHE_OPERATION_ID_DATA_TO_FILE_START: 'QUERY_CACHE_OPERATION_ID_DATA_TO_FILE_START',
        QUERY_CACHE_OPERATION_ID_DATA_TO_FILE_END: 'QUERY_CACHE_OPERATION_ID_DATA_TO_FILE_END',
    },
    LOCAL_STORE: {
        LOCAL_STORE_INIT_START: 'LOCAL_STORE_INIT_START',
        LOCAL_STORE_INIT_END: 'LOCAL_STORE_INIT_END',
        LOCAL_STORE_START: 'LOCAL_STORE_START',
        LOCAL_STORE_END: 'LOCAL_STORE_END',
        LOCAL_STORE_GET_CACHED_OPERATION_ID_DATA_START:
            'LOCAL_STORE_GET_CACHED_OPERATION_ID_DATA_START',
        LOCAL_STORE_GET_CACHED_OPERATION_ID_DATA_END:
            'LOCAL_STORE_GET_CACHED_OPERATION_ID_DATA_END',
        LOCAL_STORE_PROCESS_RESPONSE_START: 'LOCAL_STORE_PROCESS_RESPONSE_START',
        LOCAL_STORE_PROCESS_RESPONSE_END: 'LOCAL_STORE_PROCESS_RESPONSE_END',
        LOCAL_STORE_GET_PARANET_METADATA_START: 'LOCAL_STORE_GET_PARANET_METADATA_START',
        LOCAL_STORE_GET_PARANET_METADATA_END: 'LOCAL_STORE_GET_PARANET_METADATA_END',
        LOCAL_STORE_INITIALIZE_PARANET_REPOSITORY_START:
            'LOCAL_STORE_INITIALIZE_PARANET_REPOSITORY_START',
        LOCAL_STORE_INITIALIZE_PARANET_REPOSITORY_END:
            'LOCAL_STORE_INITIALIZE_PARANET_REPOSITORY_END',
        LOCAL_STORE_INITIALIZE_PARANET_RECORD_START: 'LOCAL_STORE_INITIALIZE_PARANET_RECORD_START',
        LOCAL_STORE_INITIALIZE_PARANET_RECORD_END: 'LOCAL_STORE_INITIALIZE_PARANET_RECORD_END',
        LOCAL_STORE_INCREMENT_PARANET_KA_COUNT_START:
            'LOCAL_STORE_INCREMENT_PARANET_KA_COUNT_START',
        LOCAL_STORE_INCREMENT_PARANET_KA_COUNT_END: 'LOCAL_STORE_INCREMENT_PARANET_KA_COUNT_END',
    },
    PARANET: {
        PARANET_SYNC_START: 'PARANET_SYNC_START',
        PARANET_SYNC_END: 'PARANET_SYNC_END',
        PARANET_SYNC_MISSED_KAS_SYNC_START: 'PARANET_SYNC_MISSED_KAS_SYNC_START',
        PARANET_SYNC_MISSED_KAS_SYNC_END: 'PARANET_SYNC_MISSED_KAS_SYNC_END',
        PARANET_SYNC_NEW_KAS_SYNC_START: 'PARANET_SYNC_NEW_KAS_SYNC_START',
        PARANET_SYNC_NEW_KAS_SYNC_END: 'PARANET_SYNC_NEW_KAS_SYNC_END',
    },
    ASK: {
        ASK_START: 'ASK_START',
        ASK_END: 'ASK_END',
        ASK_REMOTE_START: 'ASK_REMOTE_START',
        ASK_REMOTE_END: 'ASK_REMOTE_START',
        ASK_REMOTE_PREPARE_MESSAGE_START: 'ASK_REMOTE_PREPARE_MESSAGE_START',
        ASK_REMOTE_PREPARE_MESSAGE_END: 'ASK_REMOTE_PREPARE_MESSAGE_END',
        ASK_REMOTE_SEND_MESSAGE_START: 'ASK_REMOTE_SEND_MESSAGE_START',
        ASK_REMOTE_SEND_MESSAGE_END: 'ASK_REMOTE_SEND_MESSAGE_END',
        ASK_REMOTE_REMOVE_CACHED_SESSION_START: 'ASK_REMOTE_REMOVE_CACHED_SESSION_START',
        ASK_REMOTE_REMOVE_CACHED_SESSION_END: 'ASK_REMOTE_REMOVE_CACHED_SESSION_END',
        ASK_FIND_NODES_START: 'ASK_FIND_NODES_START',
        ASK_FIND_NODES_END: 'ASK_FIND_NODES_END',
        ASK_FIND_NODES_FIND_SHARD_NODES_START: 'ASK_FIND_NODES_FIND_SHARD_NODES_START',
        ASK_FIND_NODES_FIND_SHARD_NODES_END: 'ASK_FIND_NODES_FIND_SHARD_NODES_END',
        ASK_FIND_NODES_PROCESS_FOUND_NODES_START: 'ASK_FIND_NODES_PROCESS_FOUND_NODES_START',
        ASK_FIND_NODES_PROCESS_FOUND_NODES_END: 'ASK_FIND_NODES_PROCESS_FOUND_NODES_END',
        ASK_FETCH_FROM_NODES_START: 'ASK_FETCH_FROM_NODES_START',
        ASK_FETCH_FROM_NODES_END: 'ASK_FETCH_FROM_NODES_END',
        ASK_NETWORK_START: 'ASK_NETWORK_START',
        ASK_NETWORK_END: 'ASK_NETWORK_END',
        ASK_REQUEST_START: 'ASK_REQUEST_START',
        ASK_REQUEST_END: 'ASK_REQUEST_END',
        ASK_REQUEST_PREPARE_MESSAGE_START: 'ASK_REQUEST_PREPARE_MESSAGE_START',
        ASK_REQUEST_PREPARE_MESSAGE_END: 'ASK_REQUEST_PREPARE_MESSAGE_END',
        ASK_REQUEST_SEND_MESSAGE_START: 'ASK_REQUEST_SEND_MESSAGE_START',
        ASK_REQUEST_SEND_MESSAGE_END: 'ASK_REQUEST_SEND_MESSAGE_END',
    },
    FINALITY: {
        FINALITY_START: 'FINALITY_START',
        FINALITY_END: 'FINALITY_END',
        FINALITY_REMOTE_START: 'FINALITY_REMOTE_START',
        FINALITY_REMOTE_END: 'FINALITY_REMOTE_START',
        FINALITY_REMOTE_PREPARE_MESSAGE_START: 'FINALITY_REMOTE_PREPARE_MESSAGE_START',
        FINALITY_REMOTE_PREPARE_MESSAGE_END: 'FINALITY_REMOTE_PREPARE_MESSAGE_END',
        FINALITY_REMOTE_SEND_MESSAGE_START: 'FINALITY_REMOTE_SEND_MESSAGE_START',
        FINALITY_REMOTE_SEND_MESSAGE_END: 'FINALITY_REMOTE_SEND_MESSAGE_END',
        FINALITY_REMOTE_REMOVE_CACHED_SESSION_START: 'FINALITY_REMOTE_REMOVE_CACHED_SESSION_START',
        FINALITY_REMOTE_REMOVE_CACHED_SESSION_END: 'FINALITY_REMOTE_REMOVE_CACHED_SESSION_END',
        FINALITY_REPLICATE_START: 'FINALITY_REPLICATE_START',
        FINALITY_REPLICATE_END: 'FINALITY_REPLICATE_END',
        FINALITY_FETCH_FROM_NODES_START: 'FINALITY_FETCH_FROM_NODES_START',
        FINALITY_FETCH_FROM_NODES_END: 'FINALITY_FETCH_FROM_NODES_END',
        FINALITY_REQUEST_START: 'FINALITY_REQUEST_START',
        FINALITY_REQUEST_END: 'FINALITY_REQUEST_END',
        FINALITY_REQUEST_PREPARE_MESSAGE_START: 'FINALITY_REQUEST_PREPARE_MESSAGE_START',
        FINALITY_REQUEST_PREPARE_MESSAGE_END: 'FINALITY_REQUEST_PREPARE_MESSAGE_END',
        FINALITY_REQUEST_SEND_MESSAGE_START: 'FINALITY_REQUEST_SEND_MESSAGE_START',
        FINALITY_REQUEST_SEND_MESSAGE_END: 'FINALITY_REQUEST_SEND_MESSAGE_END',
        PUBLISH_FINALITY_REMOTE_START: 'PUBLISH_FINALITY_REMOTE_START',
        PUBLISH_FINALITY_REMOTE_END: 'PUBLISH_FINALITY_REMOTE_END',
        PUBLISH_FINALITY_END: 'PUBLISH_FINALITY_END',
        PUBLISH_FINALITY_FETCH_FROM_NODES_END: 'PUBLISH_FINALITY_FETCH_FROM_NODES_END',
    },
};

export const OPERATIONS = {
    PUBLISH: 'publish',
    FINALITY: 'finality',
    UPDATE: 'update',
    GET: 'get',
    ASK: 'ask',
};

export const SERVICE_AGREEMENT_START_TIME_DELAY_FOR_COMMITS_SECONDS = {
    mainnet: 5 * 60,
    testnet: 5 * 60,
    devnet: 3 * 60,
    test: 10,
    development: 10,
};

export const EXPECTED_TRANSACTION_ERRORS = {
    INSUFFICIENT_FUNDS: 'InsufficientFunds',
    NODE_ALREADY_SUBMITTED_COMMIT: 'NodeAlreadySubmittedCommit',
    TIMEOUT_EXCEEDED: 'timeout exceeded',
    TOO_LOW_PRIORITY: 'TooLowPriority',
    NODE_ALREADY_REWARDED: 'NodeAlreadyRewarded',
    SERVICE_AGREEMENT_DOESNT_EXIST: 'ServiceAgreementDoesntExist',
    INVALID_PROXIMITY_SCORE_FUNCTIONS_PAIR_ID: 'InvalidProximityScoreFunctionsPairId',
    INVALID_SCORE_FUNCTION_ID: 'InvalidScoreFunctionId',
    COMMIT_WINDOW_CLOSED: 'CommitWindowClosed',
    NODE_NOT_IN_SHARDING_TABLE: 'NodeNotInShardingTable',
    PROOF_WINDOW_CLOSED: 'ProofWindowClosed',
    NODE_NOT_AWARDED: 'NodeNotAwarded',
    WRONG_MERKLE_PROOF: 'WrongMerkleProof',
    NO_MINTED_ASSETS: 'NoMintedAssets',
};

/**
 * @constant {number} OPERATION_ID_COMMAND_CLEANUP_TIME_MILLS -
 * operation id command cleanup interval time 24h
 */
export const OPERATION_ID_COMMAND_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;
/**
 * @constant {number} FINALIZED_COMMAND_CLEANUP_TIME_MILLS - Command cleanup interval time
 * finalized commands command cleanup interval time 24h
 */

export const PUBLISH_STORAGE_MEMORY_CLEANUP_COMMAND_CLEANUP_TIME_MILLS = 4 * 60 * 60 * 1000;
export const PUBLISH_STORAGE_FILE_CLEANUP_COMMAND_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;

export const FINALIZED_COMMAND_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;

export const GET_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;
export const GET_CLEANUP_TIME_DELAY = 24 * 60 * 60 * 1000;
export const GET_RESPONSE_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;
export const GET_RESPONSE_CLEANUP_TIME_DELAY = 24 * 60 * 60 * 1000;

export const PUBLISH_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;
export const PUBLISH_CLEANUP_TIME_DELAY = 24 * 60 * 60 * 1000;
export const PUBLISH_RESPONSE_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;
export const PUBLISH_RESPONSE_CLEANUP_TIME_DELAY = 24 * 60 * 60 * 1000;

export const UPDATE_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;
export const UPDATE_CLEANUP_TIME_DELAY = 24 * 60 * 60 * 1000;
export const UPDATE_RESPONSE_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;
export const UPDATE_RESPONSE_CLEANUP_TIME_DELAY = 24 * 60 * 60 * 1000;

export const ASK_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;
export const ASK_CLEANUP_TIME_DELAY = 24 * 60 * 60 * 1000;
export const ASK_RESPONSE_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;
export const ASK_RESPONSE_CLEANUP_TIME_DELAY = 24 * 60 * 60 * 1000;

export const FINALITY_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;
export const FINALITY_CLEANUP_TIME_DELAY = 24 * 60 * 60 * 1000;
export const FINALITY_RESPONSE_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;
export const FINALITY_RESPONSE_CLEANUP_TIME_DELAY = 24 * 60 * 60 * 1000;

export const PROCESSED_BLOCKCHAIN_EVENTS_CLEANUP_TIME_MILLS = 24 * 60 * 60 * 1000;
export const PROCESSED_BLOCKCHAIN_EVENTS_CLEANUP_TIME_DELAY = 24 * 60 * 60 * 1000;

/**
 * @constant {number} COMMAND_STATUS -
 * Status for commands
 */
export const COMMAND_STATUS = {
    FAILED: 'FAILED',
    EXPIRED: 'EXPIRED',
    UNKNOWN: 'UNKNOWN',
    STARTED: 'STARTED',
    PENDING: 'PENDING',
    COMPLETED: 'COMPLETED',
    REPEATING: 'REPEATING',
};

export const PENDING_STORAGE_FILES_FOR_REMOVAL_MAX_NUMBER = 100;

export const OPERATION_ID_FILES_FOR_REMOVAL_MAX_NUMBER = 100;

export const REPOSITORY_ROWS_FOR_REMOVAL_MAX_NUMBER = 10_000;

export const ARCHIVE_COMMANDS_FOLDER = 'commands';

export const ARCHIVE_BLOCKCHAIN_EVENTS_FOLDER = 'blockchain_events';

export const ARCHIVE_GET_FOLDER = 'get';
export const ARCHIVE_GET_RESPONSES_FOLDER = 'get_responses';

export const ARCHIVE_PUBLISH_FOLDER = 'publish';
export const ARCHIVE_PUBLISH_RESPONSES_FOLDER = 'publish_responses';

export const ARCHIVE_UPDATE_FOLDER = 'update';
export const ARCHIVE_UPDATE_RESPONSES_FOLDER = 'update_responses';

export const ARCHIVE_ASK_FOLDER = 'ask';
export const ARCHIVE_ASK_RESPONSES_FOLDER = 'ask_responses';

export const ARCHIVE_FINALITY_FOLDER = 'finality';
export const ARCHIVE_FINALITY_RESPONSES_FOLDER = 'finality_responses';

/**
 * How many commands will run in parallel
 * @type {number}
 */
export const COMMAND_QUEUE_PARALLELISM = 150;

export const GET_LATEST_SERVICE_AGREEMENT_BATCH_SIZE = 50;

export const GET_ASSERTION_IDS_MAX_RETRY_COUNT = 5;

export const GET_ASSERTION_IDS_RETRY_DELAY_IN_SECONDS = 2;

export const GET_LATEST_SERVICE_AGREEMENT_EXCLUDE_LATEST_TOKEN_ID = 1;

/**
 * @constant {object} HTTP_API_ROUTES -
 *  HTTP API Routes with parameters
 */
export const HTTP_API_ROUTES = {
    v0: {
        publish: {
            method: 'post',
            path: '/publish',
            options: { rateLimit: true },
        },
        update: {
            method: 'post',
            path: '/update',
            options: { rateLimit: true },
        },
        query: {
            method: 'post',
            path: '/query',
            options: {},
        },
        'local-store': {
            method: 'post',
            path: '/local-store',
            options: {},
        },
        get: {
            method: 'post',
            path: '/get',
            options: { rateLimit: true },
        },
        result: {
            method: 'get',
            path: '/:operation/:operationId',
            options: {},
        },
        info: {
            method: 'get',
            path: '/info',
            options: {},
        },
        'bid-suggestion': {
            method: 'get',
            path: '/bid-suggestion',
            options: {},
        },
    },
    v1: {
        publish: {
            method: 'post',
            path: '/publish',
            options: { rateLimit: true },
        },
        finality: {
            method: 'get',
            path: '/finality',
            options: {},
        },
        // update: {
        //     method: 'post',
        //     path: '/update',
        //     options: { rateLimit: true },
        // },
        query: {
            method: 'post',
            path: '/query',
            options: {},
        },
        get: {
            method: 'post',
            path: '/get',
            options: { rateLimit: true },
        },
        result: {
            method: 'get',
            path: '/:operation/:operationId',
            options: {},
        },
        info: {
            method: 'get',
            path: '/info',
            options: {},
        },
        ask: {
            method: 'post',
            path: '/ask',
            options: {},
        },
    },
};

/**
 * @constant {object} NETWORK_PROTOCOLS -
 *  Network protocols
 */
export const NETWORK_PROTOCOLS = {
    STORE: ['/store/1.0.0'],
    UPDATE: ['/update/1.0.0'],
    GET: ['/get/1.0.0'],
    ASK: ['/ask/1.0.0'],
    FINALITY: ['/finality/1.0.0'],
};

export const OPERATION_STATUS = {
    IN_PROGRESS: 'IN_PROGRESS',
    FAILED: 'FAILED',
    COMPLETED: 'COMPLETED',
};

export const AGREEMENT_STATUS = {
    ACTIVE: 'ACTIVE',
    EXPIRED: 'EXPIRED',
};

export const OPERATION_REQUEST_STATUS = {
    FAILED: 'FAILED',
    COMPLETED: 'COMPLETED',
};

/**
 * Local query types
 * @type {{CONSTRUCT: string, SELECT: string}}
 */
export const QUERY_TYPES = {
    SELECT: 'SELECT',
    CONSTRUCT: 'CONSTRUCT',
};

/**
 * Local store types
 * @type {{TRIPLE: string, PENDING: string}}
 */
export const LOCAL_STORE_TYPES = {
    TRIPLE: 'TRIPLE',
    TRIPLE_PARANET: 'TRIPLE_PARANET',
    PENDING: 'PENDING',
};

/**
 * Contract names
 * @type {{SHARDING_TABLE: string}}
 */
export const CONTRACTS = {
    SHARDING_TABLE: 'ShardingTable',
    STAKING: 'Staking',
    PROFILE: 'Profile',
    HUB: 'Hub',
    CONTENT_ASSET: 'ContentAsset',
    COMMIT_MANAGER_V1_U1: 'CommitManagerV1U1',
    PARAMETERS_STORAGE: 'ParametersStorage',
    IDENTITY_STORAGE: 'IdentityStorage',
    LOG2PLDSF: 'Log2PLDSF',
    LINEAR_SUM: 'LinearSum',
    PARANETS_REGISTRY: 'ParanetsRegistry',
};

export const MONITORED_CONTRACT_EVENTS = {
    Hub: ['NewContract', 'ContractChanged', 'NewAssetStorage', 'AssetStorageChanged'],
    ParametersStorage: ['ParameterChanged'],
    ContentAsset: ['AssetMinted'],
};

export const MONITORED_CONTRACTS = Object.keys(MONITORED_CONTRACT_EVENTS);

export const MONITORED_EVENTS = Object.values(MONITORED_CONTRACT_EVENTS).flatMap(
    (events) => events,
);

export const CONTRACT_INDEPENDENT_EVENTS = {};

export const NODE_ENVIRONMENTS = {
    DEVELOPMENT: 'development',
    TEST: 'test',
    DEVNET: 'devnet',
    TESTNET: 'testnet',
    MAINNET: 'mainnet',
};

export const MAXIMUM_FETCH_EVENTS_FAILED_COUNT = 1000;

export const CONTRACT_EVENT_FETCH_INTERVALS = {
    MAINNET: 10 * 1000,
    DEVELOPMENT: 4 * 1000,
};

export const TRANSACTION_CONFIRMATIONS = 1;

export const SERVICE_AGREEMENT_SOURCES = {
    BLOCKCHAIN: 'blockchain',
    EVENT: 'event',
    CLIENT: 'client',
    NODE: 'node',
};

export const CACHE_DATA_TYPES = {
    NUMBER: 'number',
    ANY: 'any',
};

export const PARANET_SYNC_SOURCES = {
    SYNC: 'sync',
    LOCAL_STORE: 'local_store',
};

/**
 * CACHED_FUNCTIONS:
 * ContractName: {
 *     functionName: returnType
 * }
 * @type {{IdentityStorageContract: [{name: string, type: string}], ParametersStorageContract: *}}
 */
export const CACHED_FUNCTIONS = {
    ParametersStorageContract: {
        r0: CACHE_DATA_TYPES.NUMBER,
        r1: CACHE_DATA_TYPES.NUMBER,
        r2: CACHE_DATA_TYPES.NUMBER,
        finalizationCommitsNumber: CACHE_DATA_TYPES.NUMBER,
        updateCommitWindowDuration: CACHE_DATA_TYPES.NUMBER,
        commitWindowDurationPerc: CACHE_DATA_TYPES.NUMBER,
        proofWindowDurationPerc: CACHE_DATA_TYPES.NUMBER,
        epochLength: CACHE_DATA_TYPES.NUMBER,
        minimumStake: CACHE_DATA_TYPES.ANY,
        maximumStake: CACHE_DATA_TYPES.ANY,
        minProofWindowOffsetPerc: CACHE_DATA_TYPES.NUMBER,
        maxProofWindowOffsetPerc: CACHE_DATA_TYPES.NUMBER,
    },
    IdentityStorageContract: {
        getIdentityId: CACHE_DATA_TYPES.NUMBER,
    },
    Log2PLDSFContract: {
        getParameters: CACHE_DATA_TYPES.ANY,
    },
    LinearSumContract: {
        getParameters: CACHE_DATA_TYPES.ANY,
    },
};

export const LOW_BID_SUGGESTION = 'low';
export const MED_BID_SUGGESTION = 'med';
export const HIGH_BID_SUGGESTION = 'high';
export const ALL_BID_SUGGESTION = 'all';
export const BID_SUGGESTION_RANGE_ENUM = [
    LOW_BID_SUGGESTION,
    MED_BID_SUGGESTION,
    HIGH_BID_SUGGESTION,
    ALL_BID_SUGGESTION,
];
export const LOW_BID_SUGGESTION_OFFSET = 9;
export const MED_BID_SUGGESTION_OFFSET = 11;
export const HIGH_BID_SUGGESTION_OFFSET = 14;

export const LOCAL_INSERT_FOR_ASSET_SYNC_MAX_ATTEMPTS = 5;
export const LOCAL_INSERT_FOR_ASSET_SYNC_RETRY_DELAY = 1000;

export const LOCAL_INSERT_FOR_CURATED_PARANET_MAX_ATTEMPTS = 5;
export const LOCAL_INSERT_FOR_CURATED_PARANET_RETRY_DELAY = 1000;

export const TRIPLE_STORE_REPOSITORY = {
    DKG: 'dkg',
    DKG_HISTORIC: 'dkg-historic',
};

export const TRIPLES_VISIBILITY = {
    PUBLIC: 'public',
    PRIVATE: 'private',
    ALL: 'all',
};
